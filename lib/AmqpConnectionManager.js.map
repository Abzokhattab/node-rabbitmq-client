{"version":3,"sources":["../src/AmqpConnectionManager.js"],"names":["HEARTBEAT_IN_SECONDS","neverThrows","err","setImmediate","Error","message","stack","AmqpConnectionManager","EventEmitter","constructor","urls","options","findServers","_channels","_currentUrl","connectionOptions","heartbeatIntervalInSeconds","reconnectTimeInSeconds","setMaxListeners","_findServers","Promise","resolve","_connect","createChannel","channel","ChannelWrapper","push","once","filter","c","close","_closed","all","map","catch","then","_currentConnection","removeAllListeners","isConnected","_connecting","_urls","length","pb","callFn","Array","isArray","url","urlString","amqpUrl","urlUtils","parse","search","amqp","connect","format","connection","on","reason","emit"],"mappings":"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","file":"AmqpConnectionManager.js","sourcesContent":["import { EventEmitter } from 'events';\nimport amqp from 'amqplib';\nimport urlUtils from 'url';\n\nimport ChannelWrapper from './ChannelWrapper';\nimport { wait } from './helpers';\nimport pb from 'promise-breaker';\n\n// Default heartbeat time.\nconst HEARTBEAT_IN_SECONDS = 5;\n\n/* istanbul ignore next */\nfunction neverThrows() {\n    return err =>\n        setImmediate(() => {\n            throw new Error(`AmqpConnectionManager - should never get here: ${err.message}\\n` +\n                err.stack);\n        });\n}\n\n//\n// Events:\n// * `connect({connection, url})` - Emitted whenever we connect to a broker.\n// * `disconnect({err})` - Emitted whenever we disconnect from a broker.\n//\nexport default class AmqpConnectionManager extends EventEmitter {\n    /**\n     *  Create a new AmqplibConnectionManager.\n     *\n     * @param {(string|Object)[]} urls - An array of brokers to connect to.\n     *   Takes url strings or objects {url: string, connectionOptions?: object}\n     *   If present, a broker's [connectionOptions] will be used instead\n     *   of [options.connectionOptions] when passed to the amqplib connect method.\n     *   AmqplibConnectionManager will round-robin between them whenever it\n     *   needs to create a new connection.\n     * @param {Object} [options={}] -\n     * @param {number} [options.heartbeatIntervalInSeconds=5] - The interval,\n     *   in seconds, to send heartbeats.\n     * @param {number} [options.reconnectTimeInSeconds] - The time to wait\n     *   before trying to reconnect.  If not specified, defaults to\n     *   `heartbeatIntervalInSeconds`.\n     * @param {Object} [options.connectionOptions] - Passed to the amqplib\n     *   connect method.\n     * @param {function} [options.findServers] - A `fn(callback)` or a `fn()`\n     *   which returns a Promise.  This should resolve to one or more servers\n     *   to connect to, either a single URL or an array of URLs.  This is handy\n     *   when you're using a service discovery mechanism such as Consul or etcd.\n     *   Note that if this is supplied, then `urls` is ignored.\n     */\n    constructor(urls, options = {}) {\n        super();\n        if(!urls && !options.findServers) {\n            throw new Error(\"Must supply either `urls` or `findServers`\");\n        }\n        this._channels = [];\n\n        this._currentUrl = 0;\n        this.connectionOptions = options.connectionOptions;\n\n        this.heartbeatIntervalInSeconds = options.heartbeatIntervalInSeconds || HEARTBEAT_IN_SECONDS;\n        this.reconnectTimeInSeconds = options.reconnectTimeInSeconds || this.heartbeatIntervalInSeconds;\n\n        // There will be one listener per channel, and there could be a lot of channels, so disable warnings from node.\n        this.setMaxListeners(0);\n\n        this._findServers = options.findServers || (() => Promise.resolve(urls));\n\n        this._connect();\n    }\n\n    // `options` here are any options that can be passed to ChannelWrapper.\n    createChannel(options = {}) {\n        const channel = new ChannelWrapper(this, options);\n        this._channels.push(channel);\n        channel.once('close', () => {\n            this._channels = this._channels.filter(c => c !== channel);\n        });\n        return channel;\n    }\n\n    close() {\n        if(this._closed) { return Promise.resolve(); }\n        this._closed = true;\n\n        return Promise.all(this._channels.map(channel => channel.close()))\n            .catch(function() {\n                // Ignore errors closing channels.\n            })\n            .then(() => {\n                this._channels = [];\n                if(this._currentConnection) {\n                    this._currentConnection.removeAllListeners('close');\n                    this._currentConnection.close();\n                }\n                this._currentConnection = null;\n            });\n    }\n\n    isConnected() {\n        return !!this._currentConnection;\n    }\n\n    _connect() {\n        if(this._closed || this._connecting || this.isConnected()) {\n            return Promise.resolve();\n        }\n\n        this._connecting = true;\n\n        return Promise.resolve()\n        .then(() => {\n            if(!this._urls || (this._currentUrl >= this._urls.length)) {\n                this._currentUrl = 0;\n                return pb.callFn(this._findServers, 0, null);\n            } else {\n                return this._urls;\n            }\n        })\n        .then(urls => {\n            if(urls && !Array.isArray(urls)) { urls = [urls]; }\n            this._urls = urls;\n\n            if(!urls || (urls.length === 0)) {\n                throw new Error('amqp-connection-manager: No servers found');\n            }\n\n            // Round robin between brokers\n            const url = urls[this._currentUrl];\n            this._currentUrl++;\n\n            // url can be a string or object {url: string, connectionOptions?: object}\n            const urlString = url.url || url;\n            const connectionOptions = url.connectionOptions || this.connectionOptions;\n\n            const amqpUrl = urlUtils.parse(urlString);\n            if(amqpUrl.search) {\n                amqpUrl.search += `&heartbeat=${this.heartbeatIntervalInSeconds}`;\n            } else {\n                amqpUrl.search = `?heartbeat=${this.heartbeatIntervalInSeconds}`;\n            }\n\n            return amqp.connect(urlUtils.format(amqpUrl), connectionOptions)\n            .then(connection => {\n                this._currentConnection = connection;\n\n                //emit 'blocked' when RabbitMQ server decides to block the connection (resources running low)\n                connection.on('blocked', reason => this.emit('blocked', { reason }));\n\n                connection.on('unblocked', () => this.emit('unblocked'));\n\n                // Reconnect if the broker goes away.\n                connection.on('error', err =>\n                    Promise.resolve()\n                    .then(() =>this._currentConnection.close())\n                    .catch(() => { /* Ignore */ })\n                    .then(() => {\n                        this._currentConnection = null;\n                        this.emit('disconnect', { err });\n                        return this._connect();\n                    })\n                    // `_connect()` should never throw.\n                    .catch(neverThrows)\n                );\n\n                // Reconnect if the connection closes gracefully\n                connection.on('close', err => {\n                    this._currentConnection = null;\n                    this.emit('disconnect', { err });\n\n                    wait(this.reconnectTimeInSeconds * 1000)\n                    .then(() => this._connect())\n                    // `_connect()` should never throw.\n                    .catch(neverThrows);\n                });\n\n                this._connecting = false;\n                this.emit('connect', { connection, url: urlString });\n\n                return null;\n            });\n        })\n        .catch(err => {\n            this.emit('disconnect', { err });\n\n            // Connection failed...\n            this._currentConnection = null;\n\n            // TODO: Probably want to try right away here, especially if there are multiple brokers to try...\n            return wait(this.reconnectTimeInSeconds * 1000)\n            .then(() => {\n                this._connecting = false;\n                return this._connect();\n            });\n        });\n    }\n}\n"]}